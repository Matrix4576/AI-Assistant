1. What is a data structure?

Ans: A data structure is a way of organization data so that it can be used effectively.

2. Why are data structure imprortant?

Ans: They are an essentional ingredient in creating fast and powerfull algorithms. They help us to manage and organize data. They
make code cleaner and easier to understand.

3. Abstract Data Types vs. Data Structures:

     Simply ADT (Abstract Data Types) is ore of a logical description, while a Data Structure is concrete. Think of an ADT as a
     picture of the data and the operations to manipulate and change it. Data Structure is real, concrete thing. It can be 
     implemented and used within an algorithm. In other words an Abstraction is a DS predefined by the language. While DS are the
     user defined structures like: a variable 

     Examples of ADT are:                      
          LIST                                         
          QUEUE
          MAP
          VEHICLE
     
     Examples of Implimentations are :
          Dynamic Array Linked List
          Linked List based queue 
               Array based queue 
               Stack based queue 
          Tree map 
               Hash map / Hash Table
          Golf Cart, Bicycle, Smart Car

Complexity Analysis:
     As a programmer, we find ourselves asking the same two questions over and over again:
          How much TIME does this algorithm need to finish? 
          How much SPACE does this algorithm need for it's computation? (IMPORTANT)

Big - O Notation :
     Big-O Notation gives an upper bound of Complexity in the worst case, helping to quantify performance 
     as the inout size becomes arbitrarily large. 
     
     In Big-O notation, n = The size pf the input Complexities ordered in smales to largest. 
          Constant Time: O(1) 
          Logarithmatic Time: O(log(n))
          Linear Time: O(n) 
          Linearithmatic Time: O(nlog(n))
          Quadric Time: 0(n*n)
          Cubic Time: O(n*n*n)
          Exponential Time: O(b to the power of n), b > 1
          Factorial Time: O(n!)
     Properties of Big-O: 
          O(n + c) = O(n)
          O(cn) = O(n)
          Let f be a function that describes the running time of a particular algorithm for and inpur of size n:
          f(n) = 7log(n) cubed + 15n squares + 2n cubes + 8
          O(f(n)) = O(n*n*n)
     The following run in constant time: O(1) 
     1. a = 1
        b = 2
        c = a + 5*b

     2. i  = 0
        while i < 11:
          i = i + 1

     The followinf are examples in linear time: 0(n) 

     1.   i = 0
          while i < n:
               i = i + 1